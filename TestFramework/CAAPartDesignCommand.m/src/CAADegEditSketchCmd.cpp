//===================================================================
// COPYRIGHT  2022/03/11
//===================================================================
// CAADegEditSketchCmd.cpp
// Header definition of class CAADegEditSketchCmd
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2022/03/11 Creation: Code generated by the 3DS wizard
//===================================================================

// Local system
#include "CAADegEditSketchCmd.h"
#include "CAADegEditSketchDlg.h"		// Dialog box associated with the state command

//AfrFoundation Framework
#include "CATApplicationFrame.h"
#include "CATStackableCommandSet.h"
#include "CATFrmEditor.h"

//CATMecModUIUseItf
#include "CATFeatureImportAgent.h"       // To select a feature
#include "CATEditAgent.h"

//CATPartUseItf
#include "CATIPdgUsePad.h"
#include "CATPanelState.h"

//VisualizationInterfaces
#include "CATIBuildPath.h"                // needed to build a path element
#include "CATPathElement.h"

//CATMecModLiveUseItf
#include "CATIMmiMechanicalFeature.h"    // To handle a mechanical feature

#include "CATIPdgUsePrtProfile.h"

#include "CATISktUseSketch.h"

#include "CATCreateExternalObject.h"
CATCreateClass( CAADegEditSketchCmd);


//-------------------------------------------------------------------------
// Constructor
//-------------------------------------------------------------------------
CAADegEditSketchCmd::CAADegEditSketchCmd() :
CATStateCommand ("CAADegEditSketchCmd", CATDlgEngOneShot, CATCommandModeShared),
//  Valid states are CATDlgEngOneShot and CATDlgEngRepeat
_pDialogBox(NULL), _pFeatureAgent(NULL), _pEditAgent(NULL), _pTriggerAgent(NULL)
{
	// Build the dialog box associated with the state command
	CATApplicationFrame * pFrame = NULL;
	pFrame = CATApplicationFrame::GetFrame();
	CATDlgWindow * pParent = pFrame->GetMainWindow();
	_pDialogBox = new CAADegEditSketchDlg(pParent, "");
	_pDialogBox->Build();
}

//-------------------------------------------------------------------------
// Destructor
//-------------------------------------------------------------------------
CAADegEditSketchCmd::~CAADegEditSketchCmd()
{
	if (NULL != _pDialogBox)
	{
		_pDialogBox->RequestDelayedDestruction();
		_pDialogBox = NULL;
	}

	if (NULL != _pFeatureAgent)
	{
		_pFeatureAgent->RequestDelayedDestruction();
		_pFeatureAgent = NULL;
	}

	if (NULL != _pEditAgent)
	{
		_pEditAgent->RequestDelayedDestruction();
		_pEditAgent = NULL;
	}

	if (NULL != _pTriggerAgent)
	{
		_pTriggerAgent->RequestDelayedDestruction();
		_pTriggerAgent = NULL;
	}
}


//-------------------------------------------------------------------------
// BuildGraph()
//-------------------------------------------------------------------------
void CAADegEditSketchCmd::BuildGraph()
{
	// TODO: Define the StateChart
	// ---------------------------
	CATFrmEditor * pEditor = GetEditor();
	if (pEditor != NULL)
	{
	// 1- Agent Definition
	// -------------------

		// To select the Pad 
		_pFeatureAgent = new CATFeatureImportAgent("PadAgentId");
		_pFeatureAgent->SetBehavior(CATDlgEngWithPSOHSO | CATDlgEngWithPrevaluation);
		_pFeatureAgent->AddElementType(IID_CATIPdgUsePad);

		// Thanks this filter, the element selected is OK when the transition is done
		CATAcquisitionFilter * pFilterForProfile = Filter(
			(FilterMethod)& CAADegEditSketchCmd::TestProfile,
			(void*)NULL);

		_pFeatureAgent->SetFilter(pFilterForProfile);

		// Reads the cso for object - action
		AddCSOClient(_pFeatureAgent);

		// To execute the workbench's stack 
		_pEditAgent = new CATEditAgent("EditAgentId");
		_pEditAgent->SetPanel(_pDialogBox);

		// The workbench will be automatically those of the Sketcher. Therefore,
		// no need to call the SetWorkbench method. 

		// List of available commands for the sketcher workbench. These commands
		// (3 here) are added to those which are automaticalley set in the 
		// CATStackableCommandSet class constructor. Among them there is
		// the command to exit the workbench.
		//
		CATStackableCommandSet * pCommandSet = new CATStackableCommandSet();
		pCommandSet->AddCommand("2DConstraint");
		pCommandSet->AddCommand("2DAutoCst");
		pCommandSet->AddCommand("2DAnimateCst");

		_pEditAgent->SetCommandSet(pCommandSet);
		pCommandSet->Release();
		pCommandSet = NULL;

		// ProvideProfileToEdit is the method to provide the object to edit
		_pEditAgent->SetElementProvider(this,
			(CATEditAgent::ElementProvider)&CAADegEditSketchCmd::ProvideProfileToEdit);


		// To ask the profile edition
		_pTriggerAgent = new CATDialogAgent("TriggerAgentid");
		_pTriggerAgent->AcceptOnNotify(_pDialogBox, "CATNotification");


	// 2- State Definition
	// -------------------

		// State to get the Pad
		CATDialogState * pInputPadState = GetInitialState("InputPadStateId");
		if (NULL != pInputPadState)
		{
			pInputPadState->AddDialogAgent(_pFeatureAgent);
		}

		// State to launch the profile edition
		// Caution: _pEditAgent is a state command, this agent should be always attached 
		// to a state without other agent.
		//
		CATDialogState * pEditSketchState = AddDialogState("EditSketchStateId");
		if (NULL != pEditSketchState)
		{
			pEditSketchState->AddDialogAgent(_pEditAgent);
		}


		CATPanelState * pDialogState = new CATPanelState(this, "DialogStateId", _pDialogBox);
		if (NULL != pDialogState)
		{
			AddDialogState(pDialogState);
			pDialogState->AddDialogAgent(_pTriggerAgent);
		}


	// 3- Transition Definition
	// -------------------------     
		if (pInputPadState != NULL)
		{
			CATDialogTransition * pFirstTransition = AddTransition(pInputPadState, pDialogState,
				IsOutputSetCondition(_pFeatureAgent),
				Action((ActionMethod)& CAADegEditSketchCmd::SelectPad,
				(ActionMethod)& CAADegEditSketchCmd::UndoSelectPad,
					(ActionMethod)& CAADegEditSketchCmd::RedoSelectPad));

			CATDialogTransition * pEditSketchTransition = AddTransition(pDialogState, pEditSketchState,
				IsOutputSetCondition(_pTriggerAgent),
				Action((ActionMethod)& CAADegEditSketchCmd::TriggerEditSketch));

			CATDialogTransition * pBackTransition = AddTransition(pEditSketchState, pDialogState,
				IsOutputSetCondition(_pEditAgent),
				Action((ActionMethod)& CAADegEditSketchCmd::EditSketch));

		}


		// 4- Cleaning Step 
		// ----------------

		// The panel state should be released 
		// 
		if (NULL != pDialogState)
		{
			pDialogState->Release();
			pDialogState = NULL;
		}

	}
}


//-------------------------------------------------------------------------
// ActionOne ()
//-------------------------------------------------------------------------
CATBoolean CAADegEditSketchCmd::ActionOne( void *data )
{
// TODO: Define the action associated with the transition
// ------------------------------------------------------

return TRUE;
}

CATBoolean CAADegEditSketchCmd::TestProfile(CATDialogAgent * iAgent, void * iUsefulData)
{
	CATBoolean rcheck = FALSE;

	if ((NULL != iAgent) && (1 == iAgent->IsAKindOf("CATFeatureImportAgent")))
	{
		// GetElementValue does not addref the returned pointer
		CATBaseUnknown * pSelectedElt = ((CATFeatureImportAgent *)iAgent)->GetElementValue();
		if (NULL != pSelectedElt)
		{
			CATIMmiMechanicalFeature * pIMecFeatOnProfile = NULL;
			HRESULT rc = FindProfile(pSelectedElt, &pIMecFeatOnProfile);
			if (SUCCEEDED(rc) && (NULL != pIMecFeatOnProfile))
			{
				pIMecFeatOnProfile->Release();
				pIMecFeatOnProfile = NULL;
				rcheck = TRUE;
			}
		}
	}

	return rcheck;
}

//-------------------------------------------------------------------------

CATPathElement * CAADegEditSketchCmd::ProvideProfileToEdit(CATClassId iDummy)
{
	CATPathElement * pPathToReturn = NULL;

	if ((NULL == GetEditor()) || (NULL == _pFeatureAgent)) return NULL;

	// GetElementValue does not addref the returned pointer
	CATBaseUnknown * pSelectedElt = _pFeatureAgent->GetElementValue();

	// Retrieve the profile to edit
	CATIMmiMechanicalFeature * pIMecFeatOnProfile = NULL;
	HRESULT rc = FindProfile(pSelectedElt, &pIMecFeatOnProfile);

	// Create a path from the profile to the root
	if (SUCCEEDED(rc) && (NULL != pIMecFeatOnProfile))
	{
		CATIBuildPath *piBuildPath = NULL;
		rc = pIMecFeatOnProfile->QueryInterface(IID_CATIBuildPath, (void**)&piBuildPath);

		if (SUCCEEDED(rc))
		{
			CATPathElement Context = GetEditor()->GetUIActiveObject();
			rc = piBuildPath->ExtractPathElement(&Context, &pPathToReturn);

			piBuildPath->Release();
			piBuildPath = NULL;
		}

		pIMecFeatOnProfile->Release();
		pIMecFeatOnProfile = NULL;
	}

	return pPathToReturn;
}

//-------------------------------------------------------------------------

CATBoolean CAADegEditSketchCmd::SelectPad(void *UsefulData)
{

	// GetElementValue does not addref the returned pointer
	CATBaseUnknown * pSelectedElt = _pFeatureAgent->GetElementValue();

	if ((NULL != pSelectedElt) && (NULL != _pDialogBox))
	{
		CATIMmiMechanicalFeature * pIMecFeatOnProfile = NULL;
// 		HRESULT rc = FindProfile(pSelectedElt, &pIMecFeatOnProfile);
// 		if (SUCCEEDED(rc) && (NULL != pIMecFeatOnProfile))
// 		{
// 			// The name of the profile is displayed in the dialog box
// 			_pDialogBox->SetElement(pIMecFeatOnProfile);
// 
// 			pIMecFeatOnProfile->Release();
// 			pIMecFeatOnProfile = NULL;
// 		}
	}

	if (NULL != _pDialogBox)
	{
		_pDialogBox->SetVisibility(CATDlgShow);
	}

	return TRUE;
}

//-------------------------------------------------------------------------
CATBoolean CAADegEditSketchCmd::UndoSelectPad(void *UsefulData)
{
	if (NULL != _pDialogBox)
	{
		_pDialogBox->SetVisibility(CATDlgHide);
	}
	return TRUE;
}
//-------------------------------------------------------------------------
CATBoolean CAADegEditSketchCmd::RedoSelectPad(void *UsefulData)
{
	if (NULL != _pDialogBox)
	{
		_pDialogBox->SetVisibility(CATDlgShow);
	}
	return TRUE;
}

CATBoolean CAADegEditSketchCmd::EditSketch(void *iDummy)
{

	// The workbench's stack is ended, the dialog box can be set visible

	if (NULL != _pDialogBox)
	{
		_pDialogBox->SetVisibility(CATDlgShow);
	}

	// to enable the agent reusage
	if (NULL != _pEditAgent)
	{
		_pEditAgent->InitializeAcquisition();
	}

	return TRUE;
}
//-------------------------------------------------------------------------

CATBoolean CAADegEditSketchCmd::TriggerEditSketch(void *iDummy)
{

	// The dialog box should not disturb the stacked's workbench
	if (NULL != _pDialogBox)
	{
		_pDialogBox->SetVisibility(CATDlgHide);
	}

	// To enable the agent reusage
	if (NULL != _pTriggerAgent)
	{
		_pTriggerAgent->InitializeAcquisition();
	}

	return TRUE;
}

//-------------------------------------------------------------------------

HRESULT CAADegEditSketchCmd::FindProfile(CATBaseUnknown  * iSelectedPad,
	CATIMmiMechanicalFeature ** oMecFeatOnProfile)
{
	HRESULT rc = E_FAIL;

	if (NULL != iSelectedPad)
	{
		CATIPdgUsePrism * piPrismOnPad = NULL;
		rc = iSelectedPad->QueryInterface(IID_CATIPdgUsePrism, (void**)& piPrismOnPad);
		if (SUCCEEDED(rc))
		{
			CATIMmiMechanicalFeature_var spIMecFeatOnProfile = piPrismOnPad->GetProfile();
			if (NULL_var != spIMecFeatOnProfile)
			{
				CATIPdgUsePrtProfile_var spIProfileOnProfile = spIMecFeatOnProfile;
				if (NULL_var != spIProfileOnProfile)
				{
					int nbelt = spIProfileOnProfile->GetElementCount();

					if (nbelt == 1)
					{
						CATIMmiMechanicalFeature_var spMecFeatOnFirstElt;
						spIProfileOnProfile->GetElement(1, spMecFeatOnFirstElt);

						if (NULL_var != spMecFeatOnFirstElt)
						{
							// Just verify that it's a sketch
							CATISktUseSketch * pISketch = NULL;
							rc = spMecFeatOnFirstElt->QueryInterface(IID_CATISktUseSketch, (void**)& pISketch);
							if (SUCCEEDED(rc))
							{
								pISketch->Release();
								pISketch = NULL;

								rc = spMecFeatOnFirstElt->QueryInterface(IID_CATIMmiMechanicalFeature,
									(void**)oMecFeatOnProfile);
							}
						}
						else rc = E_FAIL;

					}
					else rc = E_FAIL;
				}
				else rc = E_FAIL;
			}
			else rc = E_FAIL;

			piPrismOnPad->Release();
			piPrismOnPad = NULL;
		}
	}

	return rc;
}
