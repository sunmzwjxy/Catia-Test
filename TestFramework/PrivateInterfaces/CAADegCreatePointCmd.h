//===================================================================
// COPYRIGHT  2022/03/08
//===================================================================
// CAADegCreatePointCmd.cpp
// Header definition of class CAADegCreatePointCmd
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2022/03/08 Creation: Code generated by the 3DS wizard
//===================================================================

#ifndef CAADegCreatePointCmd_H
#define CAADegCreatePointCmd_H

#include "CATStateCommand.h"
#include "CATSysBoolean.h"

// Mathematics Framework 
#include "CATMathPoint.h"     //Needed by NewPoint 

// DialogEngine Framework
class CATIndicationAgent;    //Dialog agent 
class CATDialogAgent;        //Dialog agent 

// Local Framework
class CAACreatePoingDlg;     //The dialog box to entry the point coordinates

//----------------------------------------------------------------------

/**
* Describe your command here.
* <p>
* Using this prefered syntax will enable mkdoc to document your class.
* <p>
* refer to programming resources of Dialog engine framework.
* (consult base class description).
*/
class CAADegCreatePointCmd: public CATStateCommand
{
// Allows customization/internationalization of command's messages
// ---------------------------------------------------------------
DeclareResource( CAADegCreatePointCmd, CATStateCommand )

public:
	CAADegCreatePointCmd();
virtual ~CAADegCreatePointCmd();

// Activate
// --------
// Called when the command selector gives the focus to this command. 
// Two cases can happen:
//  -The command starts from the beginning.
//  -The command restarts at the state that was current when a shared command 
//   took the focus from it.
//
// These two cases can be distinguished thanks to the notification type.
//
CATStatusChangeRC Activate(CATCommand * iCmd, CATNotification * iNotif);

// Cancel
// --------
// Called when the command selector gives the focus to an exclusive command,
// or if this command completes. In this latter case, the focus is given to 
// the default command (usually Select). 
// You should not take care of the command destruction. This is done
// by the dialog state command engine.
// 
// If the end user selects this command again, it is recreated. 
//
CATStatusChangeRC Cancel(CATCommand * iCmd, CATNotification * iNotif);

// Deactivate
// ----------
// Called when the command selector freezes this command to give
// the focus to a shared command. When the shared command completes, this
// frozen command will be reactivated from its current state. 
//  
CATStatusChangeRC Desactivate(CATCommand * iCmd, CATNotification * iNotif);

/**
* Defines the command automata.
* <br>
* <i>(states, transitions and agents)</i>
*/
virtual void     BuildGraph();

/**
* Action associated to state transitions.
*/
virtual CATBoolean  ActionOne(void * data);

// CheckPoint
// ----------
// Tests if the root object exists else the point should not be 
// created.
//
CATBoolean  CheckPoint(void * iBidon);

// CreatePointByIndication
// -----------------------
// Gets the 2D point indicated, projects it in the plane 
// to have a 3D point and calls NewPoint to create a point 
//
CATBoolean  CreatePointByIndication(void * iDummy);

// CreatePointByBox   
// -----------------------
// Calls NewPoint with the point got from the dialog box
//
CATBoolean  CreatePointByBox(void * iDummy);

private:
	// Creates a new point
	void               NewPoint(const CATMathPoint &iPoint);


CATIndicationAgent	* _Indication;

// Dialog box to entry coordinates
CAACreatePoingDlg   * _pPointEditor;

// To create an element
CATBaseUnknown      * _pUIActiveObject;
CATBaseUnknown      * _pContainer;

};

//----------------------------------------------------------------------

#endif
